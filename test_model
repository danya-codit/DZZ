import torch
import torch.nn as nn
import segmentation_models_pytorch as smp
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import os
import glob
from google.colab import drive
from ipywidgets import widgets, interact
from IPython.display import display, clear_output
import albumentations as A
from albumentations.pytorch import ToTensorV2

# 1. Монтируем Google Drive и загружаем модель
drive.mount('/content/drive')

# Конфигурация классов и цветов
CLASSES = {
    0: 'background',
    1: 'city',    # Красный
    2: 'field',   # Желтый
    3: 'forest',  # Зеленый
    4: 'water'    # Синий
}

CLASS_COLORS = {
    1: [255, 0, 0],
    2: [255, 255, 0],
    3: [0, 255, 0],
    4: [0, 0, 255]
}

# Определяем архитектуру модели
class SegModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = smp.Unet(
            encoder_name="resnet34",
            encoder_weights=None,
            classes=len(CLASSES),
            activation='softmax'
        )
        
    def forward(self, x):
        return self.model(x)

# Загружаем сохраненную модель
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model_path = '/content/drive/MyDrive/Цифровая кафедра/Сигментация/supervisely/models/best_model.pth'
model = SegModel().to(device)
model.load_state_dict(torch.load(model_path, map_location=device))
model.eval()

# 2. Функция для интерактивной визуализации
def interactive_mask_predictor():
    base_path = '/content/drive/MyDrive/Цифровая кафедра/Сигментация/Полный архив/'
    categories = [d for d in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, d))]
    
    # Создаем элементы управления
    category_dropdown = widgets.Dropdown(
        options=categories,
        description='Категория:',
        style={'description_width': 'initial'}
    )
    
    image_slider = widgets.IntSlider(
        value=3,
        min=1,
        max=20,
        step=1,
        description='Количество:',
        style={'description_width': 'initial'}
    )
    
    alpha_slider = widgets.FloatSlider(
        value=0.5,
        min=0.1,
        max=1.0,
        step=0.1,
        description='Прозрачность:',
        style={'description_width': 'initial'}
    )
    
    random_toggle = widgets.ToggleButton(
        value=True,
        description='Случайный выбор'
    )
    
    show_grid = widgets.ToggleButton(
        value=False,
        description='Показать сетку'
    )
    
    run_button = widgets.Button(
        description="Запуск!",
        button_style='success',
        layout={'width': '200px'}
    )

    # Функция обработки
    def on_run(b):
        clear_output(wait=True)
        display(category_dropdown, image_slider, alpha_slider, 
                widgets.HBox([random_toggle, show_grid]), run_button)
        
        category = category_dropdown.value
        num_images = image_slider.value
        alpha = alpha_slider.value
        
        # Получаем список изображений
        image_dir = os.path.join(base_path, category)
        images = glob.glob(os.path.join(image_dir, '*.png')) + \
                 glob.glob(os.path.join(image_dir, '*.jpg')) + \
                 glob.glob(os.path.join(image_dir, '*.tif'))
        
        if not images:
            print("Изображения не найдены!")
            return
            
        # Выбираем изображения
        selected = np.random.choice(images, num_images) if random_toggle.value else images[:num_images]
        
        # Обработка каждого изображения
        for img_path in selected:
            try:
                img = np.array(Image.open(img_path).convert('RGB'))
                h, w = img.shape[:2]
                
                # Разбиваем на тайлы и обрабатываем
                tile_size = 512
                mask = np.zeros((h, w), dtype=np.uint8)
                
                for y in range(0, h, tile_size):
                    for x in range(0, w, tile_size):
                        tile = img[y:y+tile_size, x:x+tile_size]
                        if tile.size == 0:
                            continue
                            
                        # Преобразования
                        transform = A.Compose([
                            A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
                            ToTensorV2()
                        ])
                        tensor = transform(image=tile)['image'].unsqueeze(0).to(device)
                        
                        # Предсказание
                        with torch.no_grad():
                            pred = torch.argmax(model(tensor), dim=1).cpu().numpy()[0]
                            mask[y:y+tile.shape[0], x:x+tile.shape[1]] = pred
                
                # Создаем цветную маску
                color_mask = np.zeros((h, w, 3), dtype=np.uint8)
                for cls, color in CLASS_COLORS.items():
                    color_mask[mask == cls] = color
                
                # Визуализация
                fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(25, 10))
                
                # Оригинал
                ax1.imshow(img)
                ax1.set_title(f"Исходное: {os.path.basename(img_path)}")
                ax1.axis('off')
                
                # Маска
                ax2.imshow(color_mask)
                ax2.set_title("Предсказанная маска")
                ax2.axis('off')
                
                # Наложение
                ax3.imshow(img)
                ax3.imshow(color_mask, alpha=alpha)
                ax3.set_title(f"Наложение (α={alpha})")
                ax3.axis('off')
                
                # Легенда
                patches = [mpatches.Patch(color=np.array(c)/255, label=CLASSES[cls]) 
                          for cls, c in CLASS_COLORS.items()]
                plt.legend(handles=patches, bbox_to_anchor=(1.05, 1), loc='upper left')
                
                plt.tight_layout()
                plt.show()
                
                # Статистика
                print(f"\nФайл: {img_path}")
                unique, counts = np.unique(mask, return_counts=True)
                for cls, cnt in zip(unique, counts):
                    print(f"{CLASSES[cls]}: {cnt/(h*w):.2%}")
                print("-"*50)
                
            except Exception as e:
                print(f"Ошибка обработки {img_path}: {str(e)}")
    
    run_button.on_click(on_run)
    
    # Отображаем элементы управления
    display(widgets.VBox([
        widgets.HBox([category_dropdown, image_slider]),
        widgets.HBox([alpha_slider]),
        widgets.HBox([random_toggle, show_grid]),
        run_button
    ]))

# Запускаем интерактивную визуализацию
print("Модель загружена. Выберите параметры и нажмите 'Запуск!'")
interactive_mask_predictor()
